pipeline {
   agent any

   tools {
  maven 'Maven 3.6.3'
}

   stages {
     
     stage('Code Checkout') {
        steps {
        git credentialsId: 'git', url: 'https://github.com/Devops2272/New-Maven-Branch.git'
        
        }
     }
   stage ('SonarQube Analysis') {
      steps {
        withSonarQubeEnv('SonarQube_Server') {
        sh 'mvn sonar:sonar'
        }
      }
    }
     stage('Generate Build Artifact') {
        steps {
        sh 'mvn clean package'
        
        }
     }
   
    
   stage('Deploye to Nexus') {
  steps {
   //sh 'mvn deploy'
   nexusArtifactUploader artifacts: [[artifactId: 'maven-web-application', classifier: '', file: 'target/maven-web-application.war', type: 'war']], credentialsId: 'Nexus', groupId: 'com.mt', nexusUrl: 'localhost:8085', nexusVersion: 'nexus3', protocol: 'http', repository: 'Maven-Java-Project-Snapshot', version: '3.0-SNAPSHOT'
  }

}
stage('Build Docker Image') {
        steps {
        
        sshPublisher(publishers: [sshPublisherDesc(configName: 'Docker', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'docker build -t newapp .', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '**/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
        
       }
     }
 
 stage ('Kubernates Deploy') {
      steps {
        sshPublisher(publishers: [sshPublisherDesc(configName: 'Docker', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''kubectl delete deployment wildfly,
kubectl delete svc demo,
kubectl apply -f kubedeploy.yml''', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
      }
    }  
     
    post {
    always {
      cleanWs cleanWhenNotBuilt: false, notFailBuild: true
    }
  }
     
     
}

}
